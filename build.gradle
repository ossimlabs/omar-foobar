plugins {
  id "com.github.erdi.webdriver-binaries" version "${ webdriverPluginVersion }"
  id "com.github.ben-manes.versions" version "${ versionsPluginVersion }"
  id 'com.google.cloud.tools.jib' version "${ jibPluginVersion }" apply false
}

subprojects { project ->
  boolean isGrailsApp = project.name.endsWith( '-app' )
  boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
  boolean isGrailsProject = isGrailsApp || isGrailsPlugin

  if ( isGrailsProject ) {
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "application"
    apply plugin: "eclipse"

    version projectVersion
    group = groupName

    if ( isGrailsApp ) {
      apply plugin: "org.grails.grails-gsp"
      apply plugin: "org.grails.grails-web"
      apply plugin: "com.bertramlabs.asset-pipeline"
    } else if ( isGrailsPlugin ) {
      apply plugin: "org.grails.grails-plugin"
    }

    repositories {
      mavenLocal()
      maven { url 'https://repo.osgeo.org/repository/release/' }
      mavenCentral()
      maven { url "https://repo.grails.org/grails/core/" }
    }

    configurations {
      all {
        resolutionStrategy.force "org.codehaus.groovy:groovy-xml:${ groovyVersion }"
        if ( isGrailsApp ) {
          resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if ( details.requested.group == 'org.seleniumhq.selenium' ) {
              details.useVersion( seleniumVersion )
            }
          }
        }
      }
    }

    dependencies {
      developmentOnly("org.springframework.boot:spring-boot-devtools")
      implementation( "org.grails:grails-core" )
      implementation( "org.grails:grails-logging" )
      implementation( "org.grails:grails-plugin-databinding" )
      implementation( "org.grails:grails-plugin-i18n" )
      implementation( "org.grails:grails-plugin-interceptors" )
      implementation( "org.grails:grails-plugin-rest" )
      implementation( "org.grails:grails-plugin-services" )
      implementation( "org.grails:grails-plugin-url-mappings" )
      implementation( "org.grails:grails-web-boot" )
      implementation( "org.grails.plugins:hibernate5" )
      implementation( "org.hibernate:hibernate-core:${ hibernateCoreVersion }" )
      implementation( "org.springframework.boot:spring-boot-autoconfigure" )
      implementation( "org.springframework.boot:spring-boot-starter-logging" )
      implementation( "org.springframework.boot:spring-boot-starter-validation" )
      compileOnly( "io.micronaut:micronaut-inject-groovy" )
      console( "org.grails:grails-console" )
      runtimeOnly( "com.h2database:h2" )
      runtimeOnly( "javax.xml.bind:jaxb-api:${ jaxbVersion }" )
      runtimeOnly( "org.apache.tomcat:tomcat-jdbc" )
      runtimeOnly( "org.glassfish.web:el-impl:${ glassfishVersion }" )
      testImplementation( "io.micronaut:micronaut-inject-groovy" )
      testImplementation( "org.grails:grails-gorm-testing-support" )
      testImplementation( "org.spockframework:spock-core" )
      testImplementation( "io.micronaut:micronaut-http-client" )

      if ( isGrailsApp ) {
        implementation( "org.grails.plugins:gsp" )
        implementation( "org.grails.plugins:scaffolding" )
        implementation( "org.springframework.boot:spring-boot-starter" )
        implementation( "org.springframework.boot:spring-boot-starter-actuator" )
        implementation( "org.springframework.boot:spring-boot-starter-tomcat" )
        runtimeOnly( "com.bertramlabs.plugins:asset-pipeline-grails:${ assetPipelineVersion }" )
        runtimeOnly( "org.fusesource.jansi:jansi:${ jansiVersion }" )
        testImplementation( "org.grails:grails-web-testing-support" )
        testImplementation( "org.grails.plugins:geb" )
        testImplementation( "org.seleniumhq.selenium:selenium-api:${ seleniumVersion }" )
        testImplementation( "org.seleniumhq.selenium:selenium-remote-driver:${ seleniumVersion }" )
        testImplementation( "org.seleniumhq.selenium:selenium-support:${ seleniumVersion }" )
        testRuntimeOnly( "org.seleniumhq.selenium:selenium-chrome-driver:${ seleniumVersion }" )
        testRuntimeOnly( "org.seleniumhq.selenium:selenium-firefox-driver:${ seleniumVersion }" )
        testRuntimeOnly( "org.seleniumhq.selenium:selenium-safari-driver:${ seleniumVersion }" )
      } else if ( isGrailsPlugin ) {
      }
    }
    application {
      mainClass.set( "${ project.name.replace( '-', '.' ) }.Application" )
    }

    java {
      sourceCompatibility = JavaVersion.toVersion( "17" )
    }

    tasks.withType( Test ) {
      useJUnitPlatform()
      if ( isGrailsApp ) {
        systemProperty "geb.env", System.getProperty( 'geb.env' )
        systemProperty "geb.build.reportsDir", reporting.file( "geb/integrationTest" )
        systemProperty 'webdriver.chrome.driver', "${ System.getenv( 'CHROMEWEBDRIVER' ) }/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${ System.getenv( 'GECKOWEBDRIVER' ) }/geckodriver"
      }
    }

    if ( isGrailsApp ) {
      webdriverBinaries {
        chromedriver webdriverChromeVersion
        geckodriver webdriverGeckoVersion
        edgedriver webdriverEdgeVersion
      }
    }
  }
}
